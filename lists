#include <iostream>
#include <string>

using namespace std;

template<typename T>
class Spisak
{
    public:
        Spisak();
        ~Spisak();

        void pop_front();
        void pop_back();
        void clear();
        void push_front(T data);
        void push_back(T data);
        void insert(T data, int indeks);
        void remove (int indeks);
        int GetSize() {return Size;}
        T& operator[](const int indeks);

    private:

        template<typename T>
        class chvor // каждый элемент - узел
        {
            public:
                chvor* Sledeci;          //next
                T data;
                chvor(T data, chvor* Sledeci = nullptr)
                {
                    this -> data = data;
                    this -> Sledeci = Sledeci;
                }
        };

    int Size;
    chvor<T> *head;
};

template<typename T>
Spisak<T>::Spisak()
{
    Size = 0;
    head = nullptr;
}

template<typename T>
Spisak<T>::~Spisak()
{
    clear();
}

template<typename T>
void Spisak<T> :: push_back(T data)
{
    if (head == nullptr)
    {
        head = new chvor<T>(data);
    }

    else
    {
        chvor<T> *current = this -> head;

        while(current -> Sledeci != nullptr)
        {
            current = current -> Sledeci;
        }

        current-> Sledeci = new chvor<T>(data);

    }
    Size++;
}

template<typename T>
void Spisak<T> :: push_front(T data)
{
    chvor<T>* current = new chvor<T>(data);
    current -> Sledeci = this -> head;
    this -> head = current;

    Size++;
}

template<typename T>
void Spisak<T> :: pop_front()
{
    chvor<T>* temp = head;

    head = head -> Sledeci;
    delete temp;
    Size--;
}

template<typename T>
void Spisak<T> :: pop_back()
{
    chvor<T>* current = this->head;
    while (current -> Sledeci != nullptr)
    {
        current = current -> Sledeci;
    }
    delete current;
    Size--;
}

template<typename T>
void Spisak<T> :: clear()
{
    while (Size)
    {
        pop_front();
    }
}

template<typename T>
T& Spisak<T> :: operator[](const int indeks)
{
    int counter = 0;
    chvor<T> *current = this-> head;
    while (current != nullptr)
    {
        if (counter == indeks)
        {
            return current -> data;
        }
        current = current -> Sledeci;
        counter++;
    }
}

template<typename T>
void Spisak<T> :: insert(T data, int indeks)
{
    if (indeks == 0)
    {
        push_front(data);
    }

    else
    {
        chvor<T>* prosli = this -> head;       //previous

        for(int i = 0; i < indeks - 1; i++)
        {
            prosli = prosli -> Sledeci;
        }

        chvor<T>* noviChvor = new chvor<T>(data, prosli -> Sledeci);
        prosli -> Sledeci = noviChvor;

        Size++;
    }
}

template<typename T>
void Spisak<T>::remove(int indeks)
{
    if (indeks == 0)
    {
        pop_front();
    }

    else
    {
        chvor<T>* prosli = this -> head;
        for (int i = 0; i < indeks - 1; i++)
        {
            prosli = prosli -> Sledeci;
        }
        chvor<T>* toDelete = prosli -> Sledeci;
        prosli -> Sledeci = toDelete -> Sledeci;
        delete toDelete;

        Size--;
    }
}


int main()
{
    Spisak<int> lst;
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(12);

    int numbersCount;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }

    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << endl;
    }

    lst.pop_front();
    lst.clear();
    cout << lst.GetSize() << endl;
    lst.insert(99, 1);
    return 0;
}
